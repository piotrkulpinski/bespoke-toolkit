//
// Mixins - Grid / Column
// -----------------------------------------------------------------------------

@use "sass:math";

/// Generate semantic classes for grid column gutter
///
/// @param {String} $breakpoint - Breakpoint name
/// @param {Map}    $opts - Map containing breakpoint options

@mixin grid-column-gutter($breakpoint, $opts) {
  --column-gutter: #{map-get($opts, 'column-gutter')};
}


/// Generate semantic width classes for grid column
///
/// @param {String} $breakpoint - Breakpoint name
/// @param {Map}    $opts - Map containing breakpoint options

@mixin grid-column-width($breakpoint, $opts) {
  $columns: map-get($opts, 'columns');

  @for $i from 1 through $columns {
    &--#{$breakpoint}-#{$i} {
      width: calc(#{percentage($i, $columns)} - var(--column-gutter));
    }
  }
}


/// Generate semantic offset classes for grid column
///
/// @param {String} $breakpoint - Breakpoint name
/// @param {Map}    $opts - Map containing breakpoint options

@mixin grid-column-offset($breakpoint, $opts) {
  $columns: map-get($opts, 'columns');

  @for $i from 0 through $columns {
    &--#{$breakpoint}-offset-#{$i} {
      margin-left: calc(#{percentage($i, $columns)} + (var(--column-gutter) * 0.5));
    }
  }
}


/// Generate semantic alignment classes for grid column
///
/// @param {String} $breakpoint - Breakpoint name
/// @param {Map}    $opts - Map containing breakpoint options

@mixin grid-column-alignment($breakpoint, $opts) {
  &--#{$breakpoint}-top {
    align-self: flex-start;
  }

  &--#{$breakpoint}-center {
    align-self: center;
  }

  &--#{$breakpoint}-bottom {
    align-self: flex-end;
  }
}


/// Generate semantic ordering classes for grid column
///
/// @param {String} $breakpoint - Breakpoint name
/// @param {Map}    $opts - Map containing breakpoint options

@mixin grid-column-order($breakpoint, $opts) {
  &--#{$breakpoint}-first {
    order: -1;
  }

  &--#{$breakpoint}-last {
    order: 1;
  }
}

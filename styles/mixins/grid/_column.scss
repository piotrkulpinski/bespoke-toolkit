//
// Mixins - Grid / Column
// -----------------------------------------------------------------------------

/// Generate semantic classes for grid column
///
/// @param {String} $breakpoint - Breakpoint name
/// @param {Map}    $opts - Map containing breakpoint options

@mixin grid-column($breakpoint, $opts) {
  $gutter: map-get($opts, 'gutter');

  width: calc(100% - #{$gutter});
  margin-left: ($gutter / 2);
  margin-right: ($gutter / 2);
}


/// Generate semantic width classes for grid column
///
/// @param {String} $breakpoint - Breakpoint name
/// @param {Map}    $opts - Map containing breakpoint options

@mixin grid-column-width($breakpoint, $opts) {
  $columns: map-get($opts, 'columns');
  $gutter: map-get($opts, 'gutter');

  @for $i from 1 through $columns {
    &--#{$breakpoint}-#{$i} {
      width: calc(#{percentage($i / $columns)} - #{$gutter});
    }
  }
}


/// Generate semantic offset classes for grid column
///
/// @param {String} $breakpoint - Breakpoint name
/// @param {Map}    $opts - Map containing breakpoint options

@mixin grid-column-offset($breakpoint, $opts) {
  $columns: map-get($opts, 'columns');
  $gutter: map-get($opts, 'gutter');

  @for $i from 0 through $columns {
    &--#{$breakpoint}-offset-#{$i} {
      margin-left: calc(#{percentage($i / $columns)} + #{$gutter / 2});
    }
  }
}


/// Generate semantic alignment classes for grid column
///
/// @param {String} $breakpoint - Breakpoint name
/// @param {Map}    $opts - Map containing breakpoint options

@mixin grid-column-alignment($breakpoint, $opts) {
  &--#{$breakpoint}-top { align-self: flex-start; }
  &--#{$breakpoint}-center { align-self: center; }
  &--#{$breakpoint}-bottom { align-self: flex-end; }
}


/// Generate semantic ordering classes for grid column
///
/// @param {String} $breakpoint - Breakpoint name
/// @param {Map}    $opts - Map containing breakpoint options

@mixin grid-column-order($breakpoint, $opts) {
  &--#{$breakpoint}-first { order: -1; }
  &--#{$breakpoint}-last { order: 1; }
}
